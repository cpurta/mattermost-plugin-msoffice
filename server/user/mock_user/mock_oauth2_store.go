// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-msoffice/server/user (interfaces: OAuth2StateStore)

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOAuth2StateStore is a mock of OAuth2StateStore interface
type MockOAuth2StateStore struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2StateStoreMockRecorder
}

// MockOAuth2StateStoreMockRecorder is the mock recorder for MockOAuth2StateStore
type MockOAuth2StateStoreMockRecorder struct {
	mock *MockOAuth2StateStore
}

// NewMockOAuth2StateStore creates a new mock instance
func NewMockOAuth2StateStore(ctrl *gomock.Controller) *MockOAuth2StateStore {
	mock := &MockOAuth2StateStore{ctrl: ctrl}
	mock.recorder = &MockOAuth2StateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOAuth2StateStore) EXPECT() *MockOAuth2StateStoreMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockOAuth2StateStore) Store(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockOAuth2StateStoreMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockOAuth2StateStore)(nil).Store), arg0)
}

// Verify mocks base method
func (m *MockOAuth2StateStore) Verify(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockOAuth2StateStoreMockRecorder) Verify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockOAuth2StateStore)(nil).Verify), arg0)
}
